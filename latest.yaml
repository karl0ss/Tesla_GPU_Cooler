substitutions:
  # Substitution to set a friendly name for the device
  friendly_name: TeslaGPUFan

esphome:
  # Basic device setup
  name: teslagpufan
  friendly_name: ${friendly_name}

esp8266:
  # Specify the board type
  board: esp01_1m

# Enable logging for debug purposes
logger:

# Enable Home Assistant API with encryption key
api:
  encryption:
    key: "y50TP+YDW4jEL/LR0WQ4AkChtf8LGEoRPgv5NF+0XEA="

# Over-the-air update settings with a password
ota:
  password: "17300c7bac4a847d2b255aca0f4620e3"

# Enable captive portal for initial setup
captive_portal:

wifi:
  # WiFi connection settings
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 1min

  # Static IP configuration
  manual_ip:
    static_ip: 192.168.4.103
    gateway: 192.168.4.1
    subnet: 255.255.255.0
  
  # Fallback hotspot configuration in case WiFi connection fails
  ap:
    ssid: "Teslagpufan-Esp12E"
    password: "S0tDmOp8vq0n"

# Dallas temperature sensor configuration
dallas:
  - pin: GPIO05
    update_interval: 10s # Low interval for debugging

# MQTT broker configuration for communication
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_pass
  on_disconnect:
    # Set fan to 100% if MQTT disconnects
    then:
      - lambda: |-
          id(fan_speed_percent) = 100.0;
          id(fan_speed).set_level(1.0);

# Global variables to store fan speed percentage and sensor selection state
globals:
  - id: fan_speed_percent
    type: float
    initial_value: '0.0'
  - id: use_gpu_temp
    type: bool
    initial_value: 'true' # Defaults to using the GPU sensor

# Switch to toggle between GPU temperature and Dallas sensor temperature
switch:
  - platform: template
    name: "Use GPU Temperature"
    id: use_gpu_temp_switch
    lambda: |-
      return id(use_gpu_temp);
    turn_on_action:
      - globals.set:
          id: use_gpu_temp
          value: "true"
      - logger.log: "Switched to use GPU Temperature"
    turn_off_action:
      - globals.set:
          id: use_gpu_temp
          value: "false"
      - logger.log: "Switched to use Dallas Sensor"
    restore_mode: ALWAYS_ON

# Text sensor to publish IP address and uptime
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Address

  - platform: template
    name: ${friendly_name} Uptime
    id: uptime_human
    icon: mdi:clock-start

# Various sensors for monitoring and control
sensor:
  # WiFi signal strength sensor
  - platform: wifi_signal
    name: WiFi Strength
    update_interval: 30s # Low interval for debugging

  # Template sensor for current fan speed
  - platform: template
    name: "Current Fan Speed"
    lambda: |-
      return round(id(fan_speed_percent));
    unit_of_measurement: '%'
    update_interval: 5s

  # MQTT sensor to subscribe to GPU temperature topic
  - platform: mqtt_subscribe
    name: "GPU Temp"
    id: gpu_temperature
    topic: TEST
    accuracy_decimals: 0
    unit_of_measurement: "°C"
    on_value:
      # Logic for controlling fan speed based on GPU temperature
      then:
        - lambda: |-
            if (id(use_gpu_temp)) {
              if (id(gpu_temperature).state < 70.0) {
                id(fan_speed).set_level(0.25); // Set fan to 25% below 70°C
                id(fan_speed_percent) = 25.0;
              } else if (id(gpu_temperature).state < 82.0) {
                float temp = id(gpu_temperature).state;
                float fanSpeedPercent = ((temp - 70.0) / (82.0 - 70.0)) * (75.0 - 31.0) + 31.0;
                id(fan_speed).set_level(fanSpeedPercent / 100.0); // Scale fan speed between 31% and 75%
                id(fan_speed_percent) = fanSpeedPercent;
              } else {
                id(fan_speed_percent) = 100.0;
                id(fan_speed).set_level(1.0); // Set fan to 100% at or above 82°C
              }
            }

  # Pulse counter to measure RPM signal from fan
  - platform: pulse_counter
    pin: GPIO0
    name: RPM Signal
    id: fan_RPM_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 10s # Low interval for debugging

  # Dallas temperature sensor
  - platform: dallas
    address: 0x233c01d075790d28
    id: sensor_temperature
    name: "Sensor Temperature"
    accuracy_decimals: 0
    on_value:
      # Logic for controlling fan speed based on Dallas sensor temperature
      then:
        - lambda: |-
            if (!id(use_gpu_temp)) {
              if (id(sensor_temperature).state < 20.0) {
                id(fan_speed).set_level(0.25); // Set fan to 25% below 20°C
                id(fan_speed_percent) = 25.0;
              } else if (id(sensor_temperature).state < 28.0) {
                float temp = id(sensor_temperature).state;
                float fanSpeedPercent = ((temp - 20.0) / (28.0 - 20.0)) * (75.0 - 31.0) + 31.0;
                id(fan_speed).set_level(fanSpeedPercent / 100.0); // Scale fan speed between 31% and 75%
                id(fan_speed_percent) = fanSpeedPercent;
              } else {
                id(fan_speed_percent) = 100.0;
                id(fan_speed).set_level(1.0); // Set fan to 100% at or above 28°C
              }
            }

  # Uptime sensor to provide human-readable uptime
  - platform: uptime
    name: ${friendly_name} Uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      # Publish formatted uptime as a text sensor
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds / 60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

# PWM output to control the fan speed
output:
  - platform: esp8266_pwm
    id: fan_speed
    pin: GPIO02
    frequency: "25000 Hz"
    min_power: 10%
    max_power: 100%

# Number component to allow manual fan speed override
number:
  - platform: template
    name: "Fan Speed Override"
    id: fan_speed_override
    internal: false
    max_value: 100.0
    min_value: 0.0
    step: 25
    optimistic: true
    mode: slider
    on_value:
      # Set the fan speed based on override value
      then:
        - output.set_level:
            id: fan_speed
            level: !lambda "return x / 100.0;"
        - lambda: |-
            id(fan_speed_percent) = x;
