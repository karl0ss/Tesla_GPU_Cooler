substitutions:
  friendly_name: TeslaGPUFan

esphome:
  name: "teslagpufan"
  friendly_name: ${friendly_name}

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "17300c7bac4a847d2b255aca0f4620e3"

captive_portal:

wifi:
  ssid: KOffice
  password: !secret wifi_password
  reboot_timeout: 5min
  manual_ip:
    static_ip: 192.168.4.105
    gateway: 192.168.4.1
    subnet: 255.255.255.0

  ap:
    ssid: "Teslagpufan-Esp12E"
    password: "S0tDmOp8vq0n"

dallas:
  - pin: GPIO05 
    update_interval: 10s  # Low Interval for DEBUGGING

mqtt:
  broker: 192.168.4.196
  username: mosquitto
  password: !secret mqtt_pass
  on_disconnect:
    then:
      - lambda: |-
          id(fan_speed_percent) = 100.0;
          id(fan_speed).set_level(1.0);  // Set fan to 100%

globals:
  - id: fan_speed_percent
    type: float
    initial_value: '0.0'
  - id: use_gpu_temp
    type: bool
    initial_value: 'true'  # Defaults to using the GPU sensor
  - id: gpu_max_temp
    type: float
    initial_value: '0.0'
  - id: manual_override
    type: bool
    initial_value: 'false'

switch:
  - platform: template
    name: "Use GPU Temperature"
    id: use_gpu_temp_switch
    lambda: |-
      return id(use_gpu_temp);
    turn_on_action:
      - globals.set:
          id: use_gpu_temp
          value: "true"
      - globals.set:
          id: manual_override
          value: "false"  # Reset manual override when switching controllers
      - logger.log: "Switched to use GPU Temperature"
    turn_off_action:
      - globals.set:
          id: use_gpu_temp
          value: "false"
      - globals.set:
          id: manual_override
          value: "false"  # Reset manual override when switching controllers
      - logger.log: "Switched to use Dallas Sensor"
    restore_mode: ALWAYS_ON

  - platform: template
    name: "Manual Fan Override"
    id: manual_override_switch
    lambda: |-
      return id(manual_override);
    turn_on_action:
      - globals.set:
          id: manual_override
          value: "true"
      - logger.log: "Manual Fan Override enabled"
    turn_off_action:
      - globals.set:
          id: manual_override
          value: "false"
      - logger.log: "Manual Fan Override disabled"
    restore_mode: ALWAYS_OFF

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Address

  - platform: template
    name: ${friendly_name} Uptime
    id: uptime_human
    icon: mdi:clock-start

  - platform: mqtt_subscribe
    name: "GPU 1 Temp"
    internal: True
    id: gpu_1_temp
    topic: "sensors2mqtt/nvidia-smi/00000000_03_00_0"

  - platform: mqtt_subscribe
    name: "GPU 2 Temp"
    internal: True
    id: gpu_2_temp
    topic: "sensors2mqtt/nvidia-smi/00000000_04_00_0"

sensor:
  - platform: wifi_signal
    name: WiFi Strength
    update_interval: 30s  # Low Interval for DEBUGGING

  - platform: template
    name: "GPU 1 Temperature"
    id: gpu_1_temp_sensor
    unit_of_measurement: "°C"
    update_interval: never

  - platform: template
    name: "GPU 2 Temperature"
    id: gpu_2_temp_sensor
    unit_of_measurement: "°C"
    update_interval: never

  - platform: template
    name: "Current Fan Speed"
    lambda: 'return round(id(fan_speed_percent));'
    unit_of_measurement: '%'
    update_interval: 5s

  - platform: template
    name: "GPU Maximum Temperature"
    id: gpu_max_temp_sensor
    unit_of_measurement: "°C"
    lambda: |-
      return id(gpu_max_temp);
    update_interval: 5s

  - platform: pulse_counter
    pin: GPIO0
    name: RPM Signal
    id: fan_RPM_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 10s  # Low Interval for DEBUGGING

  - platform: dallas
    address: 0x233c01d075790d28
    id: sensor_temperature
    name: "Sensor Temperature"
    accuracy_decimals: 0
    on_value:
      then:
        - lambda: |-
            if (!id(use_gpu_temp) && !id(manual_override)) {
              if (id(sensor_temperature).state < 20.0) {
                id(fan_speed).set_level(0.25);  // Set fan to 25% below 20°C
                id(fan_speed_percent) = 25.0;
              } else if (id(sensor_temperature).state >= 20.0 && id(sensor_temperature).state < 28.0) {
                float temp = id(sensor_temperature).state;
                float fanSpeedPercent = ((temp - 20.0) / (28.0 - 20.0)) * (75.0 - 31.0) + 31.0;
                id(fan_speed).set_level(fanSpeedPercent / 100.0);  // Scale fan speed between 31% and 75%
                id(fan_speed_percent) = fanSpeedPercent;
              } else if (id(sensor_temperature).state >= 28.0) {
                id(fan_speed_percent) = 100.0;
                id(fan_speed).set_level(1.0);  // Set fan to 100% at or above 28°C
              }
            }

  - platform: uptime
    name: ${friendly_name} Uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds / 60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

interval:
  - interval: 5s
    then:
      - lambda: |-
          if (id(gpu_1_temp).state.length() > 0) {
            // Parse the JSON string
            std::string json_str = id(gpu_1_temp).state;
            DynamicJsonDocument doc(1024);
            DeserializationError error = deserializeJson(doc, json_str);

            if (error) {
              ESP_LOGD("main", "Failed to parse JSON string");
              return;
            }

            // Extract values from the JSON object
            float temperature = doc["temperature.gpu"];

            // Update the sensors
            id(gpu_1_temp_sensor).publish_state(temperature);
          }
      - lambda: |-
          if (id(gpu_2_temp).state.length() > 0) {
            // Parse the JSON string
            std::string json_str = id(gpu_2_temp).state;
            DynamicJsonDocument doc(1024);
            DeserializationError error = deserializeJson(doc, json_str);

            if (error) {
              ESP_LOGD("main", "Failed to parse JSON string");
              return;
            }

            // Extract values from the JSON object
            float temperature = doc["temperature.gpu"];

            // Update the sensors
            id(gpu_2_temp_sensor).publish_state(temperature);
          }

  - interval: 2s
    then:
      - lambda: |-
          if (id(use_gpu_temp) && !id(manual_override)) {
            float max_temp = std::max(id(gpu_1_temp_sensor).state, id(gpu_2_temp_sensor).state);
            id(gpu_max_temp) = max_temp;
            if (max_temp < 30.0) {
              id(fan_speed).set_level(0.10);  // Set fan to 10% below 30°C
              id(fan_speed_percent) = 10.0;
            } else if (max_temp >= 30.0 && max_temp < 60.0) {
              float fanSpeedPercent = ((max_temp - 30.0) / (60.0 - 30.0)) * (70.0 - 10.0) + 10.0;
              id(fan_speed).set_level(fanSpeedPercent / 100.0);  // Scale fan speed between 10% and 70%
              id(fan_speed_percent) = fanSpeedPercent;
            } else if (max_temp >= 60.0) {
              id(fan_speed_percent) = 100.0;
              id(fan_speed).set_level(1.0);  // Set fan to 100% at or above 60°C
            }
          }

output:
  - platform: esp8266_pwm
    id: fan_speed
    pin: GPIO02
    frequency: "25000 Hz"
    min_power: 10%
    max_power: 100%

number:
  - platform: template
    name: "Fan Speed Override"
    id: fan_speed_override
    internal: false
    max_value: 100.0
    min_value: 0.0
    step: 25
    optimistic: true
    mode: slider
    on_value:
      then:
        - globals.set:
            id: manual_override
            value: "true"
        - output.set_level:
            id: fan_speed
            level: !lambda "return x / 100.0;"
        - lambda: |-
            id(fan_speed_percent) = x;
