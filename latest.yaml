substitutions:
  friendly_name: TeslaGPUFan

esphome:
  name: teslagpufan
  friendly_name: ${friendly_name}

esp8266:
  board: esp01_1m

# Enable logging for debug purposes
logger:

# Enable Home Assistant API with encryption key
api:
  encryption:
    key: "y50TP+YDW4jEL/LR0WQ4AkChtf8LGEoRPgv5NF+0XEA="

# Over-the-air update settings with a password
ota:
  password: "17300c7bac4a847d2b255aca0f4620e3"

# Enable captive portal for initial setup
captive_portal:

wifi:
  # WiFi connection settings
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 1min

  # Static IP configuration
  manual_ip:
    static_ip: 192.168.4.103
    gateway: 192.168.4.1
    subnet: 255.255.255.0
  
  # Fallback hotspot configuration in case WiFi connection fails
  ap:
    ssid: "Teslagpufan-Esp12E"
    password: "S0tDmOp8vq0n"

# Dallas temperature sensor configuration
dallas:
  - pin: GPIO05
    update_interval: 10s # Low interval for debugging

# MQTT broker configuration for communication
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_pass
  on_disconnect:
    # Set fan to 100% if MQTT disconnects
    then:
      - lambda: |-
          id(fan_speed_percent) = 100.0;
          id(fan_speed).set_level(1.0);

# Global variables to store fan speed percentage, sensor selection state, and target temperature
globals:
  - id: fan_speed_percent
    type: float
    initial_value: '0.0'
  - id: use_gpu_temp
    type: bool
    initial_value: 'true' # Defaults to using the GPU sensor
  - id: use_pid_control
    type: bool
    initial_value: 'false' # Defaults to not using PID control
  - id: target_temperature
    type: float
    initial_value: '70.0' # Set default target temperature to 70°C
  - id: gpu_temperature_1
    type: float
    initial_value: '0.0'
  - id: gpu_temperature_2
    type: float
    initial_value: '0.0'

# PID controller configuration
pid:
  - id: fan_pid
    sensor: average_gpu_temperature
    name: "Fan PID"
    control_algorithm: reverse
    update_interval: 1s
    output: pid_output
    # PID parameters (tune these for your specific setup)
    kp: 1.0
    ki: 0.1
    kd: 0.05
    setpoint: !lambda "return id(target_temperature);"

# Output component for the PID controller
output:
  - platform: float
    id: pid_output
    min_power: 0.0
    max_power: 1.0

switch:
  # Switch to toggle between GPU temperature and Dallas sensor temperature
  - platform: template
    name: "Use GPU Temperature"
    id: use_gpu_temp_switch
    lambda: |-
      return id(use_gpu_temp);
    turn_on_action:
      - globals.set:
          id: use_gpu_temp
          value: "true"
      - logger.log: "Switched to use GPU Temperature"
    turn_off_action:
      - globals.set:
          id: use_gpu_temp
          value: "false"
      - logger.log: "Switched to use Dallas Sensor"
    restore_mode: ALWAYS_ON

  # Switch to enable or disable PID control
  - platform: template
    name: "Enable PID Control"
    id: enable_pid_control
    lambda: |-
      return id(use_pid_control);
    turn_on_action:
      - globals.set:
          id: use_pid_control
          value: "true"
      - logger.log: "PID Control Enabled"
    turn_off_action:
      - globals.set:
          id: use_pid_control
          value: "false"
      - logger.log: "PID Control Disabled"
    restore_mode: ALWAYS_ON

# Text sensor to publish IP address and uptime
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Address

  - platform: template
    name: ${friendly_name} Uptime
    id: uptime_human
    icon: mdi:clock-start

# Various sensors for monitoring and control
sensor:
  # WiFi signal strength sensor
  - platform: wifi_signal
    name: WiFi Strength
    update_interval: 30s # Low interval for debugging

  # Template sensor for current fan speed
  - platform: template
    name: "Current Fan Speed"
    lambda: |-
      return round(id(fan_speed_percent));
    unit_of_measurement: '%'
    update_interval: 5s

  # Template sensor to calculate average GPU temperature
  - platform: template
    name: "Average GPU Temperature"
    id: average_gpu_temperature
    lambda: |-
      return (id(gpu_temperature_1) + id(gpu_temperature_2)) / 2.0;
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    update_interval: 5s

  # MQTT sensor to subscribe to the first GPU temperature topic
  - platform: mqtt_subscribe
    name: "GPU Temp 1"
    id: gpu_temp_1
    topic: sensors2mqtt/nvidia-smi/00000000_03_00_0
    json:
      # Parse JSON payload to extract the GPU temperature
      sensor:
        id: gpu_temperature_1
        value_template: "{{ value_json['temperature.gpu'] }}"
    unit_of_measurement: "°C"
    accuracy_decimals: 0

  # MQTT sensor to subscribe to the second GPU temperature topic
  - platform: mqtt_subscribe
    name: "GPU Temp 2"
    id: gpu_temp_2
    topic: sensors2mqtt/nvidia-smi/00000000_04_00_0
    json:
      # Parse JSON payload to extract the GPU temperature
      sensor:
        id: gpu_temperature_2
        value_template: "{{ value_json['temperature.gpu'] }}"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      # Logic for controlling fan speed based on average temperature
      then:
        - lambda: |-
            auto control_fan_speed = [](float temperature, float lower_limit, float upper_limit, float min_speed, float max_speed) {
              if (temperature < lower_limit) {
                return min_speed;
              } else if (temperature > upper_limit) {
                return max_speed;
              } else {
                return ((temperature - lower_limit) / (upper_limit - lower_limit)) * (max_speed - min_speed) + min_speed;
              }
            };

            if (id(use_pid_control)) {
              // If PID control is enabled, the PID controller will handle the fan speed
              return;
            }

            float fan_speed = 0.0;
            float average_temperature = (id(gpu_temperature_1) + id(gpu_temperature_2)) / 2.0;
            if (id(use_gpu_temp)) {
              fan_speed = control_fan_speed(average_temperature, 70.0, 82.0, 0.25, 1.0);
            } else {
              fan_speed = control_fan_speed(id(sensor_temperature).state, 20.0, 28.0, 0.25, 1.0);
            }
            id(fan_speed_percent) = fan_speed * 100.0;
            id(fan_speed).set_level(fan_speed);

  # Pulse counter to measure RPM signal from fan
  - platform: pulse_counter
    pin: GPIO0
    name: RPM Signal
    id: fan_RPM_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 10s # Low interval for debugging

  # Dallas temperature sensor
  - platform: dallas
    address: 0x233c01d075790d28
    id: sensor_temperature
    name: "Sensor Temperature"
    accuracy_decimals: 0

  # Uptime sensor to provide human-readable uptime
  - platform: uptime
    name: ${friendly_name} Uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      # Publish formatted uptime as a text sensor
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds / 60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

# PWM output to control the fan speed
output:
  - platform: esp8266_pwm
    id: fan_speed
    pin: GPIO02
    frequency: "25000 Hz"
    min_power: 10%
    max_power: 100%

# Number component to allow manual fan speed override
number:
  - platform: template
    name: "Fan Speed Override"
    id: fan_speed_override
    internal: false
    max_value: 100.0
    min_value: 0.0
    step: 25
    optimistic: true
    mode: slider
    on_value:
      # Set the fan speed based on override value
      then:
        - output.set_level:
            id: fan_speed
            level: !lambda "return x / 100.0;"
        - lambda: |-
            id(fan_speed_percent) = x;

# Number component to allow setting the target temperature for PID control
number:
  - platform: template
    name: "Target Temperature"
    id: target_temperature_set
    internal: false
    max_value: 100.0
    min_value: 20.0
    step: 1.0
    optimistic: true
    unit_of_measurement: "°C"
    on_value:
      # Set the target temperature for the PID controller
      then:
        - globals.set:
            id: target_temperature
            value: !lambda "return x;"
        - logger.log: "Target temperature set to ${x}°C"
