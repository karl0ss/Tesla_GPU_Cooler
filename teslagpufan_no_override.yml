substitutions:
  friendly_name: TeslaGPUFan

esphome:
  name: "teslagpufan"
  friendly_name: ${friendly_name}

esp8266:
  board: esp01_1m

# Enable logging
logger:
  level: INFO

web_server:
  port: 80

# OTA updates
ota:
  password: "17300c7bac4a847d2b255aca0f4620e3"

# Captive Portal
captive_portal:

# WiFi Configuration
wifi:
  ssid: KOffice
  password: !secret wifi_password
  reboot_timeout: 1min
  manual_ip:
    static_ip: 192.168.4.105
    gateway: 192.168.4.1
    subnet: 255.255.255.0

  ap:
    ssid: "Teslagpufan-Esp12E"
    password: "S0tDmOp8vq0n"

# MQTT Configuration
mqtt:
  broker: 192.168.4.196
  username: mosquitto
  password: !secret mqtt_pass
  on_disconnect:
    then:
      - lambda: |-
          id(fan_speed_percent) = 100.0;
          id(fan_speed).set_level(1.0);  // Set fan to 100%

# Global variables
globals:
  - id: fan_speed_percent
    type: float
    initial_value: '0.0'
  - id: gpu_max_temp
    type: float
    initial_value: '0.0'

# Switches
switch:
  - platform: restart
    name: "${friendly_name} Restart"  

# Text Sensors
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Address

  - platform: mqtt_subscribe
    name: "GPU 1 Temp"
    internal: true
    id: gpu_1_temp
    topic: "sensors2mqtt/nvidia-smi/00000000_03_00_0"

  - platform: mqtt_subscribe
    name: "GPU 2 Temp"
    internal: true
    id: gpu_2_temp
    topic: "sensors2mqtt/nvidia-smi/00000000_04_00_0"

# Sensors
sensor:
  - platform: wifi_signal
    name: WiFi Strength
    update_interval: 30s

  - platform: template
    name: "GPU 1 Temperature"
    id: gpu_1_temp_sensor
    unit_of_measurement: "°C"
    update_interval: never

  - platform: template
    name: "GPU 2 Temperature"
    id: gpu_2_temp_sensor
    unit_of_measurement: "°C"
    update_interval: never

  - platform: template
    name: "Current Fan Speed"
    lambda: 'return round(id(fan_speed_percent));'
    unit_of_measurement: '%'
    update_interval: 5s

  - platform: template
    name: "GPU Maximum Temperature"
    id: gpu_max_temp_sensor
    unit_of_measurement: "°C"
    lambda: |-
      return id(gpu_max_temp);
    update_interval: 5s

  - platform: pulse_counter
    pin: GPIO0
    name: RPM Signal
    id: fan_RPM_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 10s

# Output Configuration for Fan Speed
output:
  - platform: esp8266_pwm
    id: fan_speed
    pin: GPIO02
    frequency: "25000 Hz"
    min_power: 10%
    max_power: 100%

# Intervals
interval:
  - interval: 5s
    then:
      - lambda: |-
          if (id(gpu_1_temp).state.length() > 0) {
            std::string json_str = id(gpu_1_temp).state;
            DynamicJsonDocument doc(1024);
            DeserializationError error = deserializeJson(doc, json_str);

            if (error) {
              ESP_LOGD("main", "Failed to parse JSON string");
              return;
            }

            float temperature = doc["temperature.gpu"];
            id(gpu_1_temp_sensor).publish_state(temperature);
          }
      - lambda: |-
          if (id(gpu_2_temp).state.length() > 0) {
            std::string json_str = id(gpu_2_temp).state;
            DynamicJsonDocument doc(1024);
            DeserializationError error = deserializeJson(doc, json_str);

            if (error) {
              ESP_LOGD("main", "Failed to parse JSON string");
              return;
            }

            float temperature = doc["temperature.gpu"];
            id(gpu_2_temp_sensor).publish_state(temperature);
          }

  - interval: 1s
    then:
      - lambda: |-
          float max_temp = std::max(id(gpu_1_temp_sensor).state, id(gpu_2_temp_sensor).state);
          id(gpu_max_temp) = max_temp;
      - script.execute: adjust_fan_speed

# Script to Adjust Fan Speed
script:
  - id: adjust_fan_speed
    mode: queued
    then:
      - lambda: |-
          float temp = id(gpu_max_temp);

          float fanSpeedPercent;
          if (temp < 50.0) {
            fanSpeedPercent = 15.0;
          } else if (temp >= 50.0 && temp < 70.0) {
            fanSpeedPercent = ((temp - 50.0) / 20.0) * 80.0 + 20.0;
          } else {
            fanSpeedPercent = 100.0;
          }

          id(fan_speed).set_level(fanSpeedPercent / 100.0);
          id(fan_speed_percent) = fanSpeedPercent;
